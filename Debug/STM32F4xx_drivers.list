
STM32F4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d28  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ed0  08000ed0  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ed0  08000ed0  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08000ed0  08000ed0  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ed0  08000ed0  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ed0  08000ed0  00010ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ed4  08000ed4  00010ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08000ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000038  08000f10  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08000f10  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   000023de  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000706  00000000  00000000  00022446  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000218  00000000  00000000  00022b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001d0  00000000  00000000  00022d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002b5c  00000000  00000000  00022f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001a92  00000000  00000000  00025a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000e8a1  00000000  00000000  00027526  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00035dc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007e0  00000000  00000000  00035e44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000038 	.word	0x20000038
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000eb8 	.word	0x08000eb8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000003c 	.word	0x2000003c
 80001e4:	08000eb8 	.word	0x08000eb8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:
#define MY_ADDR 0x61;

#define SLAVE_ADDR  0x70

void delay(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <delay+0x12>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <delay+0x28>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d9f8      	bls.n	8000204 <delay+0xc>
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	0003d08f 	.word	0x0003d08f

08000224 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 800022a:	4b10      	ldr	r3, [pc, #64]	; (800026c <I2C1_GPIOInits+0x48>)
 800022c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
 800022e:	2302      	movs	r3, #2
 8000230:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000232:	2301      	movs	r3, #1
 8000234:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 8000236:	2301      	movs	r3, #1
 8000238:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAlFunMode = 4;
 800023a:	2304      	movs	r3, #4
 800023c:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800023e:	2302      	movs	r3, #2
 8000240:	72bb      	strb	r3, [r7, #10]

	GPIO_PeriClockControl(GPIOB, ENABLE);
 8000242:	2101      	movs	r1, #1
 8000244:	4809      	ldr	r0, [pc, #36]	; (800026c <I2C1_GPIOInits+0x48>)
 8000246:	f000 fb81 	bl	800094c <GPIO_PeriClockControl>
	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800024a:	2306      	movs	r3, #6
 800024c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fc4b 	bl	8000aec <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000256:	2307      	movs	r3, #7
 8000258:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fc45 	bl	8000aec <GPIO_Init>


}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40020400 	.word	0x40020400

08000270 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000274:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <I2C1_Inits+0x3c>)
 8000276:	4a0e      	ldr	r2, [pc, #56]	; (80002b0 <I2C1_Inits+0x40>)
 8000278:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <I2C1_Inits+0x3c>)
 800027c:	2201      	movs	r2, #1
 800027e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <I2C1_Inits+0x3c>)
 8000282:	2261      	movs	r2, #97	; 0x61
 8000284:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <I2C1_Inits+0x3c>)
 8000288:	2200      	movs	r2, #0
 800028a:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <I2C1_Inits+0x3c>)
 800028e:	4a09      	ldr	r2, [pc, #36]	; (80002b4 <I2C1_Inits+0x44>)
 8000290:	605a      	str	r2, [r3, #4]
	I2C1Handle.I2C_Config.slaveADDRmode = I2C_SLAVE_ADDR_MODE_7BITS;
 8000292:	4b06      	ldr	r3, [pc, #24]	; (80002ac <I2C1_Inits+0x3c>)
 8000294:	2201      	movs	r2, #1
 8000296:	72da      	strb	r2, [r3, #11]

	I2C_PeriClockControl(I2C1, ENABLE);
 8000298:	2101      	movs	r1, #1
 800029a:	4805      	ldr	r0, [pc, #20]	; (80002b0 <I2C1_Inits+0x40>)
 800029c:	f000 f8b0 	bl	8000400 <I2C_PeriClockControl>
	I2C_Init(&I2C1Handle);
 80002a0:	4802      	ldr	r0, [pc, #8]	; (80002ac <I2C1_Inits+0x3c>)
 80002a2:	f000 f905 	bl	80004b0 <I2C_Init>

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000054 	.word	0x20000054
 80002b0:	40005400 	.word	0x40005400
 80002b4:	000186a0 	.word	0x000186a0

080002b8 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 80002be:	4b15      	ldr	r3, [pc, #84]	; (8000314 <GPIO_ButtonInit+0x5c>)
 80002c0:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002c6:	2300      	movs	r3, #0
 80002c8:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ca:	2302      	movs	r3, #2
 80002cc:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002ce:	2300      	movs	r3, #0
 80002d0:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 80002d2:	2101      	movs	r1, #1
 80002d4:	480f      	ldr	r0, [pc, #60]	; (8000314 <GPIO_ButtonInit+0x5c>)
 80002d6:	f000 fb39 	bl	800094c <GPIO_PeriClockControl>
	GPIO_Init(&GPIOBtn);
 80002da:	f107 030c 	add.w	r3, r7, #12
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 fc04 	bl	8000aec <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <GPIO_ButtonInit+0x60>)
 80002e6:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 80002e8:	230c      	movs	r3, #12
 80002ea:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002ec:	2301      	movs	r3, #1
 80002ee:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002f0:	2302      	movs	r3, #2
 80002f2:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002f4:	2301      	movs	r3, #1
 80002f6:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002f8:	2300      	movs	r3, #0
 80002fa:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 80002fc:	2101      	movs	r1, #1
 80002fe:	4806      	ldr	r0, [pc, #24]	; (8000318 <GPIO_ButtonInit+0x60>)
 8000300:	f000 fb24 	bl	800094c <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8000304:	463b      	mov	r3, r7
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fbf0 	bl	8000aec <GPIO_Init>

}
 800030c:	bf00      	nop
 800030e:	3718      	adds	r7, #24
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40020000 	.word	0x40020000
 8000318:	40020c00 	.word	0x40020c00

0800031c <main>:


int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af02      	add	r7, sp, #8

	GPIO_ButtonInit();
 8000322:	f7ff ffc9 	bl	80002b8 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 8000326:	f7ff ff7d 	bl	8000224 <I2C1_GPIOInits>
	//enable the i2c peripheral
//	I2C_PeripheralControl(I2C1,ENABLE);

	//i2c peripheral configuration
	I2C1_Inits();
 800032a:	f7ff ffa1 	bl	8000270 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 800032e:	2101      	movs	r1, #1
 8000330:	480c      	ldr	r0, [pc, #48]	; (8000364 <main+0x48>)
 8000332:	f000 f848 	bl	80003c6 <I2C_PeripheralControl>


	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_0) );
 8000336:	bf00      	nop
 8000338:	2100      	movs	r1, #0
 800033a:	480b      	ldr	r0, [pc, #44]	; (8000368 <main+0x4c>)
 800033c:	f000 fd82 	bl	8000e44 <GPIO_ReadFromInputPin>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f8      	beq.n	8000338 <main+0x1c>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000346:	f7ff ff57 	bl	80001f8 <delay>

		//send some data to the slave
		I2C_MasterSendData(&I2C1Handle,some_data,strlen((char*)some_data),SLAVE_ADDR , I2C_DISABLE_SR);
 800034a:	4808      	ldr	r0, [pc, #32]	; (800036c <main+0x50>)
 800034c:	f7ff ff4c 	bl	80001e8 <strlen>
 8000350:	4602      	mov	r2, r0
 8000352:	2300      	movs	r3, #0
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	2370      	movs	r3, #112	; 0x70
 8000358:	4904      	ldr	r1, [pc, #16]	; (800036c <main+0x50>)
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <main+0x54>)
 800035c:	f000 f986 	bl	800066c <I2C_MasterSendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_0) );
 8000360:	e7e9      	b.n	8000336 <main+0x1a>
 8000362:	bf00      	nop
 8000364:	40005400 	.word	0x40005400
 8000368:	40020000 	.word	0x40020000
 800036c:	20000000 	.word	0x20000000
 8000370:	20000054 	.word	0x20000054

08000374 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000374:	480d      	ldr	r0, [pc, #52]	; (80003ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000376:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800037a:	490e      	ldr	r1, [pc, #56]	; (80003b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800037c:	4a0e      	ldr	r2, [pc, #56]	; (80003b8 <LoopForever+0xe>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038e:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000390:	4c0b      	ldr	r4, [pc, #44]	; (80003c0 <LoopForever+0x16>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800039e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80003a2:	f000 fd65 	bl	8000e70 <__libc_init_array>
/* Call the application's entry point.*/
   bl main
 80003a6:	f7ff ffb9 	bl	800031c <main>

080003aa <LoopForever>:

LoopForever:
    b LoopForever
 80003aa:	e7fe      	b.n	80003aa <LoopForever>
  ldr   r0, =_estack
 80003ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b4:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80003b8:	08000ed8 	.word	0x08000ed8
  ldr r2, =_sbss
 80003bc:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80003c0:	2000007c 	.word	0x2000007c

080003c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c4:	e7fe      	b.n	80003c4 <ADC_IRQHandler>

080003c6 <I2C_PeripheralControl>:
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b083      	sub	sp, #12
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
 80003ce:	460b      	mov	r3, r1
 80003d0:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80003d2:	78fb      	ldrb	r3, [r7, #3]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d106      	bne.n	80003e6 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f043 0201 	orr.w	r2, r3, #1
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 80003e4:	e005      	b.n	80003f2 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 0201 	bic.w	r2, r3, #1
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	601a      	str	r2, [r3, #0]
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
	...

08000400 <I2C_PeriClockControl>:
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	460b      	mov	r3, r1
 800040a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800040c:	78fb      	ldrb	r3, [r7, #3]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d120      	bne.n	8000454 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a22      	ldr	r2, [pc, #136]	; (80004a0 <I2C_PeriClockControl+0xa0>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800041a:	4b22      	ldr	r3, [pc, #136]	; (80004a4 <I2C_PeriClockControl+0xa4>)
 800041c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800041e:	4a21      	ldr	r2, [pc, #132]	; (80004a4 <I2C_PeriClockControl+0xa4>)
 8000420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000424:	6413      	str	r3, [r2, #64]	; 0x40
			I2C3_PCLK_DI();
		}

	}

}
 8000426:	e035      	b.n	8000494 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a1f      	ldr	r2, [pc, #124]	; (80004a8 <I2C_PeriClockControl+0xa8>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000430:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <I2C_PeriClockControl+0xa4>)
 8000432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000434:	4a1b      	ldr	r2, [pc, #108]	; (80004a4 <I2C_PeriClockControl+0xa4>)
 8000436:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800043a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800043c:	e02a      	b.n	8000494 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a1a      	ldr	r2, [pc, #104]	; (80004ac <I2C_PeriClockControl+0xac>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d126      	bne.n	8000494 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <I2C_PeriClockControl+0xa4>)
 8000448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800044a:	4a16      	ldr	r2, [pc, #88]	; (80004a4 <I2C_PeriClockControl+0xa4>)
 800044c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000450:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000452:	e01f      	b.n	8000494 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a12      	ldr	r2, [pc, #72]	; (80004a0 <I2C_PeriClockControl+0xa0>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 800045c:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <I2C_PeriClockControl+0xa4>)
 800045e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <I2C_PeriClockControl+0xa4>)
 8000462:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000466:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000468:	e014      	b.n	8000494 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <I2C_PeriClockControl+0xa8>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <I2C_PeriClockControl+0xa4>)
 8000474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000476:	4a0b      	ldr	r2, [pc, #44]	; (80004a4 <I2C_PeriClockControl+0xa4>)
 8000478:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800047c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800047e:	e009      	b.n	8000494 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <I2C_PeriClockControl+0xac>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d105      	bne.n	8000494 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <I2C_PeriClockControl+0xa4>)
 800048a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800048c:	4a05      	ldr	r2, [pc, #20]	; (80004a4 <I2C_PeriClockControl+0xa4>)
 800048e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000492:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	40005400 	.word	0x40005400
 80004a4:	40023800 	.word	0x40023800
 80004a8:	40005800 	.word	0x40005800
 80004ac:	40005c00 	.word	0x40005c00

080004b0 <I2C_Init>:
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
	uint16_t temp2 = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	827b      	strh	r3, [r7, #18]
	uint16_t temp3;

	tempreg = pI2CHandle->pI2Cx->CR1;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	617b      	str	r3, [r7, #20]
	//enabling ACK bit (which is kind of must in SPI)
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckControl << I2C_CR1_ACK );
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	7a5b      	ldrb	r3, [r3, #9]
 80004cc:	029b      	lsls	r3, r3, #10
 80004ce:	461a      	mov	r2, r3
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	4313      	orrs	r3, r2
 80004d4:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	601a      	str	r2, [r3, #0]


	//not configuring other cr1 bits, may be needed later
	tempreg = 0 ;
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]

	//divinding by 1MHZ AS we only set the final 2 or 1 digit
	tempreg = (  RCC_getPCLK1Value() / 1000000U );
 80004e2:	f000 f9db 	bl	800089c <RCC_getPCLK1Value>
 80004e6:	4602      	mov	r2, r0
 80004e8:	4b5d      	ldr	r3, [pc, #372]	; (8000660 <I2C_Init+0x1b0>)
 80004ea:	fba3 2302 	umull	r2, r3, r3, r2
 80004ee:	0c9b      	lsrs	r3, r3, #18
 80004f0:	617b      	str	r3, [r7, #20]
	//have to store the clk value in the FREQ
	tempreg = (tempreg & 0x3F );//clearing other bits expect the 6 FRQ bits
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004f8:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->CR2 |= tempreg ;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	6859      	ldr	r1, [r3, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	430a      	orrs	r2, r1
 8000508:	605a      	str	r2, [r3, #4]

	tempreg = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]

	//storing the address
	if(pI2CHandle->I2C_Config.slaveADDRmode == I2C_SLAVE_ADDR_MODE_7BITS)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	7adb      	ldrb	r3, [r3, #11]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d112      	bne.n	800053c <I2C_Init+0x8c>
	{
		temp2 &=~(1 << I2C_OAR1_ADDMODE);//to config addressing mode to 7 bit
 8000516:	8a7b      	ldrh	r3, [r7, #18]
 8000518:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800051c:	827b      	strh	r3, [r7, #18]
		//for saftey as we only have to store 7 bit address so we mask 7 bits
		temp3 = pI2CHandle->I2C_Config.I2C_DeviceAddress & 0x7F;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	7a1b      	ldrb	r3, [r3, #8]
 8000522:	b29b      	uxth	r3, r3
 8000524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000528:	81fb      	strh	r3, [r7, #14]
		temp2 |= (temp3 << 1 );
 800052a:	89fb      	ldrh	r3, [r7, #14]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	b21a      	sxth	r2, r3
 8000530:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000534:	4313      	orrs	r3, r2
 8000536:	b21b      	sxth	r3, r3
 8000538:	827b      	strh	r3, [r7, #18]
 800053a:	e013      	b.n	8000564 <I2C_Init+0xb4>


	}else if (pI2CHandle->I2C_Config.slaveADDRmode == I2C_SLAVE_ADDR_MODE_10BITS)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	7adb      	ldrb	r3, [r3, #11]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d10d      	bne.n	8000560 <I2C_Init+0xb0>
	{
		temp2 |=(1 << I2C_OAR1_ADDMODE);//to config addressing mode to 10 bit
 8000544:	8a7b      	ldrh	r3, [r7, #18]
 8000546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800054a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800054e:	827b      	strh	r3, [r7, #18]
		temp3 = pI2CHandle->I2C_Config.I2C_DeviceAddress & 0x3FF;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	7a1b      	ldrb	r3, [r3, #8]
 8000554:	81fb      	strh	r3, [r7, #14]
		temp2 |= (temp3 << 0 );
 8000556:	8a7a      	ldrh	r2, [r7, #18]
 8000558:	89fb      	ldrh	r3, [r7, #14]
 800055a:	4313      	orrs	r3, r2
 800055c:	827b      	strh	r3, [r7, #18]
 800055e:	e001      	b.n	8000564 <I2C_Init+0xb4>

	}else
	{
		I2C_ERROR();
 8000560:	f000 f98c 	bl	800087c <I2C_ERROR>
	}
	temp2 |= (1 << 14);//we have to set 14bit , as per manual
 8000564:	8a7b      	ldrh	r3, [r7, #18]
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	827b      	strh	r3, [r7, #18]
	pI2CHandle->pI2Cx->OAR1 = temp2;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	8a7a      	ldrh	r2, [r7, #18]
 8000572:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	823b      	strh	r3, [r7, #16]
	tempreg = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
	//as in standard mode we can have specific max speed
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	4a38      	ldr	r2, [pc, #224]	; (8000664 <I2C_Init+0x1b4>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d813      	bhi.n	80005ae <I2C_Init+0xfe>
	{
		//mode is standard mode
		tempreg &= ~(1 << I2C_CCR_FS );
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800058c:	617b      	str	r3, [r7, #20]
		//formula in API note
		ccr_value = RCC_getPCLK1Value() / (2*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 800058e:	f000 f985 	bl	800089c <RCC_getPCLK1Value>
 8000592:	4602      	mov	r2, r0
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	fbb2 f3f3 	udiv	r3, r2, r3
 800059e:	823b      	strh	r3, [r7, #16]
		tempreg |=(ccr_value & 0xFFF);//masking out rest of the bits as CCR is of 12 bits
 80005a0:	8a3b      	ldrh	r3, [r7, #16]
 80005a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005a6:	697a      	ldr	r2, [r7, #20]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	e027      	b.n	80005fe <I2C_Init+0x14e>
	}else
	{
		//mode is fast mode
		tempreg |= (1 << I2C_CCR_FS);
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005b4:	617b      	str	r3, [r7, #20]
		tempreg |=(pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY );
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	7a9b      	ldrb	r3, [r3, #10]
 80005ba:	039b      	lsls	r3, r3, #14
 80005bc:	461a      	mov	r2, r3
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	617b      	str	r3, [r7, #20]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	7a9b      	ldrb	r3, [r3, #10]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d10b      	bne.n	80005e4 <I2C_Init+0x134>
		{
			ccr_value = RCC_getPCLK1Value() / (3*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 80005cc:	f000 f966 	bl	800089c <RCC_getPCLK1Value>
 80005d0:	4601      	mov	r1, r0
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	685a      	ldr	r2, [r3, #4]
 80005d6:	4613      	mov	r3, r2
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	4413      	add	r3, r2
 80005dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80005e0:	823b      	strh	r3, [r7, #16]
 80005e2:	e00c      	b.n	80005fe <I2C_Init+0x14e>
		}else
		{
			ccr_value = RCC_getPCLK1Value() / (25*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 80005e4:	f000 f95a 	bl	800089c <RCC_getPCLK1Value>
 80005e8:	4601      	mov	r1, r0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	4613      	mov	r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	009a      	lsls	r2, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80005fc:	823b      	strh	r3, [r7, #16]
		}
	}
	tempreg |= (ccr_value & 0xFFF);
 80005fe:	8a3b      	ldrh	r3, [r7, #16]
 8000600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	4313      	orrs	r3, r2
 8000608:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->CCR = tempreg;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	697a      	ldr	r2, [r7, #20]
 8000610:	61da      	str	r2, [r3, #28]

	//T rise calculation

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	4a13      	ldr	r2, [pc, #76]	; (8000664 <I2C_Init+0x1b4>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d809      	bhi.n	8000630 <I2C_Init+0x180>
	{
		//mode is standard

		tempreg =  (RCC_getPCLK1Value() / 1000000U) + 1; //freqOfPCLK1*Trise
 800061c:	f000 f93e 	bl	800089c <RCC_getPCLK1Value>
 8000620:	4602      	mov	r2, r0
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <I2C_Init+0x1b0>)
 8000624:	fba3 2302 	umull	r2, r3, r3, r2
 8000628:	0c9b      	lsrs	r3, r3, #18
 800062a:	3301      	adds	r3, #1
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	e00d      	b.n	800064c <I2C_Init+0x19c>
														//Trise for SM mode is 1000ns
	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_getPCLK1Value() * 300 ) / 1000000000U ) + 1; //Trise in Fm mode is 300ns
 8000630:	f000 f934 	bl	800089c <RCC_getPCLK1Value>
 8000634:	4602      	mov	r2, r0
 8000636:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800063a:	fb03 f302 	mul.w	r3, r3, r2
 800063e:	0a5b      	lsrs	r3, r3, #9
 8000640:	4a09      	ldr	r2, [pc, #36]	; (8000668 <I2C_Init+0x1b8>)
 8000642:	fba2 2303 	umull	r2, r3, r2, r3
 8000646:	09db      	lsrs	r3, r3, #7
 8000648:	3301      	adds	r3, #1
 800064a:	617b      	str	r3, [r7, #20]


	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F); //masking tempreg as ,Trise require 5 bit value
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000656:	621a      	str	r2, [r3, #32]





}
 8000658:	bf00      	nop
 800065a:	3718      	adds	r7, #24
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	431bde83 	.word	0x431bde83
 8000664:	000186a0 	.word	0x000186a0
 8000668:	00044b83 	.word	0x00044b83

0800066c <I2C_MasterSendData>:
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
 8000678:	70fb      	strb	r3, [r7, #3]
	//1. Generate the START conditio
	pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f042 0201 	orr.w	r2, r2, #1
 8000688:	601a      	str	r2, [r3, #0]
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f8ba 	bl	8000808 <I2C_GenerateStartCondition>

	//2.Confirm that start generation is completed by checking the SB flag in the SR1
	//  Note: Until SB is cleared SCL will be stretched(pulled to LOW)
	while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB )  );
 8000694:	bf00      	nop
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2101      	movs	r1, #1
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f8d9 	bl	8000854 <I2C_GetFlagStatus>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d0f6      	beq.n	8000696 <I2C_MasterSendData+0x2a>

	//3. Send the address of the slave with r/w bit set to w(0) (toatal 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx , SlaveAddr);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	78fa      	ldrb	r2, [r7, #3]
 80006ae:	4611      	mov	r1, r2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f8b9 	bl	8000828 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR ));
 80006b6:	bf00      	nop
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2102      	movs	r1, #2
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f8c8 	bl	8000854 <I2C_GetFlagStatus>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0f6      	beq.n	80006b8 <I2C_MasterSendData+0x4c>

	//5. clear the ADDR flag according to its software sequence
	//  Note: Until ADDR is cleared SCL will be stretched(pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 80006ca:	68f8      	ldr	r0, [r7, #12]
 80006cc:	f000 f865 	bl	800079a <I2C_ClearADDRFlag>

	//6. send the data until Len becomes 0

	while(Len > 0)
 80006d0:	e014      	b.n	80006fc <I2C_MasterSendData+0x90>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 80006d2:	bf00      	nop
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f8ba 	bl	8000854 <I2C_GetFlagStatus>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0f6      	beq.n	80006d4 <I2C_MasterSendData+0x68>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	781a      	ldrb	r2, [r3, #0]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	3301      	adds	r3, #1
 80006f4:	60bb      	str	r3, [r7, #8]
		Len--;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1e7      	bne.n	80006d2 <I2C_MasterSendData+0x66>

	//7. When Len becomes zero wait for TXE=1 and BTF=1 before generating the stop condition
	// Note : TxE=1 ,BTF=1, means that both SR and DR are empty and next transmission should begin
	// when BTF=1 SCL will be stretched(pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000702:	bf00      	nop
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f8a2 	bl	8000854 <I2C_GetFlagStatus>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0f6      	beq.n	8000704 <I2C_MasterSendData+0x98>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000716:	bf00      	nop
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2104      	movs	r1, #4
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f898 	bl	8000854 <I2C_GetFlagStatus>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0f6      	beq.n	8000718 <I2C_MasterSendData+0xac>


	//8. Generate STOP condition and master need not to wait for the completion of stop condtion
	//	 Note: generating STOP,automatically clears the BTF

	if(Sr == I2C_DISABLE_SR )
 800072a:	7e3b      	ldrb	r3, [r7, #24]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d104      	bne.n	800073a <I2C_MasterSendData+0xce>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f820 	bl	800077a <I2C_GenerateStopCondition>

}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <I2C_ManageAcking>:
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000742:	b480      	push	{r7}
 8000744:	b083      	sub	sp, #12
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
 800074a:	460b      	mov	r3, r1
 800074c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 800074e:	78fb      	ldrb	r3, [r7, #3]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d106      	bne.n	8000762 <I2C_ManageAcking+0x20>
	{
		//enable the ACK
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	601a      	str	r2, [r3, #0]
	{
		//disable the ACK
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}

}
 8000760:	e005      	b.n	800076e <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	601a      	str	r2, [r3, #0]
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <I2C_GenerateStopCondition>:
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	601a      	str	r2, [r3, #0]

}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <I2C_ClearADDRFlag>:
 *
 * @Note		- None
 *
 *****************************************************************/
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b084      	sub	sp, #16
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d01f      	beq.n	80007f0 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	7f1b      	ldrb	r3, [r3, #28]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d112      	bne.n	80007de <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6a1b      	ldr	r3, [r3, #32]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d11f      	bne.n	8000800 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ffbb 	bl	8000742 <I2C_ManageAcking>


				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 80007dc:	e010      	b.n	8000800 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	60fb      	str	r3, [r7, #12]
}
 80007ee:	e007      	b.n	8000800 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	60fb      	str	r3, [r7, #12]
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <I2C_GenerateStartCondition>:
 *
 * @Note		- None
 *
 *****************************************************************/
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	601a      	str	r2, [r3, #0]

}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <I2C_ExecuteAddressPhaseWrite>:
 *
 * @Note		- None
 *
 *****************************************************************/
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx , uint8_t SlaveAddr)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
	//Note: Address is of 7 bits and 1 bit for read/write , 0th bit is read/write bit
	SlaveAddr = SlaveAddr << 1; //leftShifing  address by 1 bit to make space for read right bit
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1 << 0); //for writing, indicates transmission
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	f023 0301 	bic.w	r3, r3, #1
 8000840:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr ;//loading address pase in data register for transmitting
 8000842:	78fa      	ldrb	r2, [r7, #3]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	611a      	str	r2, [r3, #16]

}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <I2C_GetFlagStatus>:
 *
 * @Note		- None
 *
 *****************************************************************/
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	4013      	ands	r3, r2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800086a:	2301      	movs	r3, #1
 800086c:	e000      	b.n	8000870 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <I2C_ERROR>:
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_ERROR()
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <RCC__GetPLLOutputClock>:
 * 2)check what is the value of the system prescaler
 * 3)check the value of prescaler of   APBx bus on which it is connected
 * 4)then we get the value of clk to the I2C
 */
uint32_t RCC__GetPLLOutputClock()
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
	return 0;
 800088e:	2300      	movs	r3, #0

}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <RCC_getPCLK1Value>:
uint16_t AHB_PreScaler [8] = {2,4,8,16,64,128,256,512};
uint16_t APB1_PreScalar[4] = {2,4,8,16};

//this is a generic function to calculate the value of pclk1 i.e APB1 clk
uint32_t RCC_getPCLK1Value(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
	uint32_t  SystemClk ;
	uint32_t pclk1;
	//here bring bits 2and 3 to 0th and 1st position , by right shifing the 2 bits then masking other bits
	//using ' & 'then storing the value we got in the variable

	clksrc = (RCC->CFGR >>2) & 0x3;
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <RCC_getPCLK1Value+0x9c>)
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	089b      	lsrs	r3, r3, #2
 80008a8:	f003 0303 	and.w	r3, r3, #3
 80008ac:	60fb      	str	r3, [r7, #12]

	if(clksrc == 0)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <RCC_getPCLK1Value+0x1e>
	{
		//sclk sourse is HSI which is 16MHz
		SystemClk = 16000000;
 80008b4:	4b21      	ldr	r3, [pc, #132]	; (800093c <RCC_getPCLK1Value+0xa0>)
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	e00b      	b.n	80008d2 <RCC_getPCLK1Value+0x36>
	}else if(clksrc == 1)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d102      	bne.n	80008c6 <RCC_getPCLK1Value+0x2a>
	{
		//sclk source is HSE which is 8MHZ
		SystemClk = 8000000;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <RCC_getPCLK1Value+0xa4>)
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	e005      	b.n	80008d2 <RCC_getPCLK1Value+0x36>
	}else if(clksrc == 2)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d102      	bne.n	80008d2 <RCC_getPCLK1Value+0x36>
	{
		//clksrc source is Pll
		SystemClk = RCC__GetPLLOutputClock();
 80008cc:	f7ff ffdd 	bl	800088a <RCC__GetPLLOutputClock>
 80008d0:	6138      	str	r0, [r7, #16]
	}

	//finding the value of AHB prescaler

	temp = (RCC->CFGR >> 4) & 0xF;
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <RCC_getPCLK1Value+0x9c>)
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	091b      	lsrs	r3, r3, #4
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	f003 030f 	and.w	r3, r3, #15
 80008de:	72fb      	strb	r3, [r7, #11]

	if(temp <8)
 80008e0:	7afb      	ldrb	r3, [r7, #11]
 80008e2:	2b07      	cmp	r3, #7
 80008e4:	d802      	bhi.n	80008ec <RCC_getPCLK1Value+0x50>
	{
		//as for values less than 8 prescaller is 1
		ahbp = 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	75fb      	strb	r3, [r7, #23]
 80008ea:	e005      	b.n	80008f8 <RCC_getPCLK1Value+0x5c>
	}else
	{
		//doing  -8 as first 8 values of temp are not included in the arry
		//they are in the previous function
		ahbp = AHB_PreScaler[temp - 8];
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	3b08      	subs	r3, #8
 80008f0:	4a14      	ldr	r2, [pc, #80]	; (8000944 <RCC_getPCLK1Value+0xa8>)
 80008f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008f6:	75fb      	strb	r3, [r7, #23]


	//finding values of APB1 prescaler
	//for the we have to refer RCC_CFGR 's 10th bit field

	temp = (RCC->CFGR >> 10) & 0x7;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <RCC_getPCLK1Value+0x9c>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	0a9b      	lsrs	r3, r3, #10
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	f003 0307 	and.w	r3, r3, #7
 8000904:	72fb      	strb	r3, [r7, #11]

	if(temp < 4)
 8000906:	7afb      	ldrb	r3, [r7, #11]
 8000908:	2b03      	cmp	r3, #3
 800090a:	d802      	bhi.n	8000912 <RCC_getPCLK1Value+0x76>
	{
		//as for values less than 4 prescaller is 1
		apb1p = 1;
 800090c:	2301      	movs	r3, #1
 800090e:	75bb      	strb	r3, [r7, #22]
 8000910:	e005      	b.n	800091e <RCC_getPCLK1Value+0x82>
	}else
	{
		//doing  -4 as first 4 values of temp are not included in the arry
		//they are in the previous function
		apb1p =APB1_PreScalar[temp - 4];
 8000912:	7afb      	ldrb	r3, [r7, #11]
 8000914:	3b04      	subs	r3, #4
 8000916:	4a0c      	ldr	r2, [pc, #48]	; (8000948 <RCC_getPCLK1Value+0xac>)
 8000918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091c:	75bb      	strb	r3, [r7, #22]
	}

	pclk1 = ( (SystemClk / ahbp ) / apb1p );
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	fbb2 f2f3 	udiv	r2, r2, r3
 8000926:	7dbb      	ldrb	r3, [r7, #22]
 8000928:	fbb2 f3f3 	udiv	r3, r2, r3
 800092c:	607b      	str	r3, [r7, #4]

	return pclk1;
 800092e:	687b      	ldr	r3, [r7, #4]

}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	00f42400 	.word	0x00f42400
 8000940:	007a1200 	.word	0x007a1200
 8000944:	20000020 	.word	0x20000020
 8000948:	20000030 	.word	0x20000030

0800094c <GPIO_PeriClockControl>:
 *
 *****************************************************************/


void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx , uint8_t EnorDi)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
	if( EnorDi == ENABLE )
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d157      	bne.n	8000a0e <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a59      	ldr	r2, [pc, #356]	; (8000ac8 <GPIO_PeriClockControl+0x17c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d106      	bne.n	8000974 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000966:	4b59      	ldr	r3, [pc, #356]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a58      	ldr	r2, [pc, #352]	; (8000acc <GPIO_PeriClockControl+0x180>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}

	}
}
 8000972:	e0a3      	b.n	8000abc <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a56      	ldr	r2, [pc, #344]	; (8000ad0 <GPIO_PeriClockControl+0x184>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d106      	bne.n	800098a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800097c:	4b53      	ldr	r3, [pc, #332]	; (8000acc <GPIO_PeriClockControl+0x180>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	4a52      	ldr	r2, [pc, #328]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000988:	e098      	b.n	8000abc <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a51      	ldr	r2, [pc, #324]	; (8000ad4 <GPIO_PeriClockControl+0x188>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d106      	bne.n	80009a0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000992:	4b4e      	ldr	r3, [pc, #312]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a4d      	ldr	r2, [pc, #308]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800099e:	e08d      	b.n	8000abc <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a4d      	ldr	r2, [pc, #308]	; (8000ad8 <GPIO_PeriClockControl+0x18c>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d106      	bne.n	80009b6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80009a8:	4b48      	ldr	r3, [pc, #288]	; (8000acc <GPIO_PeriClockControl+0x180>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	4a47      	ldr	r2, [pc, #284]	; (8000acc <GPIO_PeriClockControl+0x180>)
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009b4:	e082      	b.n	8000abc <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a48      	ldr	r2, [pc, #288]	; (8000adc <GPIO_PeriClockControl+0x190>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d106      	bne.n	80009cc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80009be:	4b43      	ldr	r3, [pc, #268]	; (8000acc <GPIO_PeriClockControl+0x180>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a42      	ldr	r2, [pc, #264]	; (8000acc <GPIO_PeriClockControl+0x180>)
 80009c4:	f043 0310 	orr.w	r3, r3, #16
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ca:	e077      	b.n	8000abc <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a44      	ldr	r2, [pc, #272]	; (8000ae0 <GPIO_PeriClockControl+0x194>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d106      	bne.n	80009e2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80009d4:	4b3d      	ldr	r3, [pc, #244]	; (8000acc <GPIO_PeriClockControl+0x180>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	4a3c      	ldr	r2, [pc, #240]	; (8000acc <GPIO_PeriClockControl+0x180>)
 80009da:	f043 0320 	orr.w	r3, r3, #32
 80009de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009e0:	e06c      	b.n	8000abc <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a3f      	ldr	r2, [pc, #252]	; (8000ae4 <GPIO_PeriClockControl+0x198>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d106      	bne.n	80009f8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80009ea:	4b38      	ldr	r3, [pc, #224]	; (8000acc <GPIO_PeriClockControl+0x180>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a37      	ldr	r2, [pc, #220]	; (8000acc <GPIO_PeriClockControl+0x180>)
 80009f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009f6:	e061      	b.n	8000abc <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOI)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a3b      	ldr	r2, [pc, #236]	; (8000ae8 <GPIO_PeriClockControl+0x19c>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d15d      	bne.n	8000abc <GPIO_PeriClockControl+0x170>
			GPIOI_PCLK_EN();
 8000a00:	4b32      	ldr	r3, [pc, #200]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	4a31      	ldr	r2, [pc, #196]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a0c:	e056      	b.n	8000abc <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a2d      	ldr	r2, [pc, #180]	; (8000ac8 <GPIO_PeriClockControl+0x17c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d106      	bne.n	8000a24 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000a16:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a2c      	ldr	r2, [pc, #176]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000a1c:	f023 0301 	bic.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a22:	e04b      	b.n	8000abc <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a2a      	ldr	r2, [pc, #168]	; (8000ad0 <GPIO_PeriClockControl+0x184>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d106      	bne.n	8000a3a <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	4a26      	ldr	r2, [pc, #152]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000a32:	f023 0302 	bic.w	r3, r3, #2
 8000a36:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a38:	e040      	b.n	8000abc <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a25      	ldr	r2, [pc, #148]	; (8000ad4 <GPIO_PeriClockControl+0x188>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d106      	bne.n	8000a50 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a21      	ldr	r2, [pc, #132]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000a48:	f023 0304 	bic.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a4e:	e035      	b.n	8000abc <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <GPIO_PeriClockControl+0x18c>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d106      	bne.n	8000a66 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000a5e:	f023 0308 	bic.w	r3, r3, #8
 8000a62:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a64:	e02a      	b.n	8000abc <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <GPIO_PeriClockControl+0x190>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d106      	bne.n	8000a7c <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a16      	ldr	r2, [pc, #88]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000a74:	f023 0310 	bic.w	r3, r3, #16
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a7a:	e01f      	b.n	8000abc <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <GPIO_PeriClockControl+0x194>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d106      	bne.n	8000a92 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	4a10      	ldr	r2, [pc, #64]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000a8a:	f023 0320 	bic.w	r3, r3, #32
 8000a8e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a90:	e014      	b.n	8000abc <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <GPIO_PeriClockControl+0x198>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d106      	bne.n	8000aa8 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aa6:	e009      	b.n	8000abc <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOI)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <GPIO_PeriClockControl+0x19c>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d105      	bne.n	8000abc <GPIO_PeriClockControl+0x170>
			GPIOI_PCLK_DI();
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	4a05      	ldr	r2, [pc, #20]	; (8000acc <GPIO_PeriClockControl+0x180>)
 8000ab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000aba:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40021400 	.word	0x40021400
 8000ae4:	40021800 	.word	0x40021800
 8000ae8:	40022000 	.word	0x40022000

08000aec <GPIO_Init>:
 *@note2		  correctly.
 *****************************************************************/


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0 ;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
	//1. Configure the Mode of GPIO pin

	if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	795b      	ldrb	r3, [r3, #5]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d820      	bhi.n	8000b42 <GPIO_Init+0x56>
	{
		// when non interrupt mode
		temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber) );
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	795b      	ldrb	r3, [r3, #5]
 8000b04:	461a      	mov	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	791b      	ldrb	r3, [r3, #4]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 <<(2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber )); // clearing bits
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	791b      	ldrb	r3, [r3, #4]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	2103      	movs	r1, #3
 8000b20:	fa01 f303 	lsl.w	r3, r1, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	4619      	mov	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	400a      	ands	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]

		pGPIOHandle->pGPIOx->MODER |= temp; // to store pin mode value in the appropriate register we use OR so
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	6819      	ldr	r1, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	e0d2      	b.n	8000ce8 <GPIO_Init+0x1fc>

	}else
	{
		// when interrupt mode

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	795b      	ldrb	r3, [r3, #5]
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d117      	bne.n	8000b7a <GPIO_Init+0x8e>
		{
			//1.CONFIGURE FTSR

			EXTI ->FTSR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b4a:	4b4b      	ldr	r3, [pc, #300]	; (8000c78 <GPIO_Init+0x18c>)
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	7912      	ldrb	r2, [r2, #4]
 8000b52:	4611      	mov	r1, r2
 8000b54:	2201      	movs	r2, #1
 8000b56:	408a      	lsls	r2, r1
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4a47      	ldr	r2, [pc, #284]	; (8000c78 <GPIO_Init+0x18c>)
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	60d3      	str	r3, [r2, #12]
			//WE are clearing the RTSR bit as we only want falling edge detection
			EXTI->RTSR &=~( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b60:	4b45      	ldr	r3, [pc, #276]	; (8000c78 <GPIO_Init+0x18c>)
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	7912      	ldrb	r2, [r2, #4]
 8000b68:	4611      	mov	r1, r2
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	408a      	lsls	r2, r1
 8000b6e:	43d2      	mvns	r2, r2
 8000b70:	4611      	mov	r1, r2
 8000b72:	4a41      	ldr	r2, [pc, #260]	; (8000c78 <GPIO_Init+0x18c>)
 8000b74:	400b      	ands	r3, r1
 8000b76:	6093      	str	r3, [r2, #8]
 8000b78:	e035      	b.n	8000be6 <GPIO_Init+0xfa>


		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	795b      	ldrb	r3, [r3, #5]
 8000b7e:	2b05      	cmp	r3, #5
 8000b80:	d117      	bne.n	8000bb2 <GPIO_Init+0xc6>
		{
			//1.configure RTSR

			EXTI ->RTSR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b82:	4b3d      	ldr	r3, [pc, #244]	; (8000c78 <GPIO_Init+0x18c>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	7912      	ldrb	r2, [r2, #4]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	408a      	lsls	r2, r1
 8000b90:	4611      	mov	r1, r2
 8000b92:	4a39      	ldr	r2, [pc, #228]	; (8000c78 <GPIO_Init+0x18c>)
 8000b94:	430b      	orrs	r3, r1
 8000b96:	6093      	str	r3, [r2, #8]
			//WE are clearing the FTSR bit as we only want rising edge detection
			EXTI->FTSR  &=~( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b98:	4b37      	ldr	r3, [pc, #220]	; (8000c78 <GPIO_Init+0x18c>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	7912      	ldrb	r2, [r2, #4]
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	408a      	lsls	r2, r1
 8000ba6:	43d2      	mvns	r2, r2
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4a33      	ldr	r2, [pc, #204]	; (8000c78 <GPIO_Init+0x18c>)
 8000bac:	400b      	ands	r3, r1
 8000bae:	60d3      	str	r3, [r2, #12]
 8000bb0:	e019      	b.n	8000be6 <GPIO_Init+0xfa>


		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	795b      	ldrb	r3, [r3, #5]
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d115      	bne.n	8000be6 <GPIO_Init+0xfa>
		{
			//1.configure BOTH RTSR AND FTSR as we want both rising edge and
			//falling edge detection
			EXTI ->RTSR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bba:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <GPIO_Init+0x18c>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	7912      	ldrb	r2, [r2, #4]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	408a      	lsls	r2, r1
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4a2b      	ldr	r2, [pc, #172]	; (8000c78 <GPIO_Init+0x18c>)
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	6093      	str	r3, [r2, #8]

			EXTI->FTSR  |=( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bd0:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <GPIO_Init+0x18c>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	7912      	ldrb	r2, [r2, #4]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	2201      	movs	r2, #1
 8000bdc:	408a      	lsls	r2, r1
 8000bde:	4611      	mov	r1, r2
 8000be0:	4a25      	ldr	r2, [pc, #148]	; (8000c78 <GPIO_Init+0x18c>)
 8000be2:	430b      	orrs	r3, r1
 8000be4:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	791b      	ldrb	r3, [r3, #4]
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4 ;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	791b      	ldrb	r3, [r3, #4]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);//to return code used function not macro
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a1f      	ldr	r2, [pc, #124]	; (8000c7c <GPIO_Init+0x190>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d04e      	beq.n	8000ca0 <GPIO_Init+0x1b4>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a1e      	ldr	r2, [pc, #120]	; (8000c80 <GPIO_Init+0x194>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d032      	beq.n	8000c72 <GPIO_Init+0x186>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1c      	ldr	r2, [pc, #112]	; (8000c84 <GPIO_Init+0x198>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d02b      	beq.n	8000c6e <GPIO_Init+0x182>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a1b      	ldr	r2, [pc, #108]	; (8000c88 <GPIO_Init+0x19c>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d024      	beq.n	8000c6a <GPIO_Init+0x17e>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <GPIO_Init+0x1a0>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d01d      	beq.n	8000c66 <GPIO_Init+0x17a>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <GPIO_Init+0x1a4>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d016      	beq.n	8000c62 <GPIO_Init+0x176>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <GPIO_Init+0x1a8>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d00f      	beq.n	8000c5e <GPIO_Init+0x172>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <GPIO_Init+0x1ac>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d008      	beq.n	8000c5a <GPIO_Init+0x16e>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <GPIO_Init+0x1b0>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d101      	bne.n	8000c56 <GPIO_Init+0x16a>
 8000c52:	2308      	movs	r3, #8
 8000c54:	e025      	b.n	8000ca2 <GPIO_Init+0x1b6>
 8000c56:	2300      	movs	r3, #0
 8000c58:	e023      	b.n	8000ca2 <GPIO_Init+0x1b6>
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	e021      	b.n	8000ca2 <GPIO_Init+0x1b6>
 8000c5e:	2306      	movs	r3, #6
 8000c60:	e01f      	b.n	8000ca2 <GPIO_Init+0x1b6>
 8000c62:	2305      	movs	r3, #5
 8000c64:	e01d      	b.n	8000ca2 <GPIO_Init+0x1b6>
 8000c66:	2304      	movs	r3, #4
 8000c68:	e01b      	b.n	8000ca2 <GPIO_Init+0x1b6>
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e019      	b.n	8000ca2 <GPIO_Init+0x1b6>
 8000c6e:	2302      	movs	r3, #2
 8000c70:	e017      	b.n	8000ca2 <GPIO_Init+0x1b6>
 8000c72:	2301      	movs	r3, #1
 8000c74:	e015      	b.n	8000ca2 <GPIO_Init+0x1b6>
 8000c76:	bf00      	nop
 8000c78:	40013c00 	.word	0x40013c00
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40020400 	.word	0x40020400
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40020c00 	.word	0x40020c00
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40021400 	.word	0x40021400
 8000c94:	40021800 	.word	0x40021800
 8000c98:	40021c00 	.word	0x40021c00
 8000c9c:	40022000 	.word	0x40022000
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000ca4:	4b64      	ldr	r3, [pc, #400]	; (8000e38 <GPIO_Init+0x34c>)
 8000ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca8:	4a63      	ldr	r2, [pc, #396]	; (8000e38 <GPIO_Init+0x34c>)
 8000caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cae:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= portcode <<(temp2 *4);
 8000cb0:	4a62      	ldr	r2, [pc, #392]	; (8000e3c <GPIO_Init+0x350>)
 8000cb2:	7cfb      	ldrb	r3, [r7, #19]
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cba:	7c79      	ldrb	r1, [r7, #17]
 8000cbc:	7cbb      	ldrb	r3, [r7, #18]
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	495d      	ldr	r1, [pc, #372]	; (8000e3c <GPIO_Init+0x350>)
 8000cc8:	7cfb      	ldrb	r3, [r7, #19]
 8000cca:	4302      	orrs	r2, r0
 8000ccc:	3302      	adds	r3, #2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//3. Enable the exti interrupt delivery using IMR

		EXTI->IMR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cd2:	4b5b      	ldr	r3, [pc, #364]	; (8000e40 <GPIO_Init+0x354>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	7912      	ldrb	r2, [r2, #4]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	2201      	movs	r2, #1
 8000cde:	408a      	lsls	r2, r1
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4a57      	ldr	r2, [pc, #348]	; (8000e40 <GPIO_Init+0x354>)
 8000ce4:	430b      	orrs	r3, r1
 8000ce6:	6013      	str	r3, [r2, #0]


	}

	temp = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
	//2. Configure the Speed

	temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber) );
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	799b      	ldrb	r3, [r3, #6]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	791b      	ldrb	r3, [r3, #4]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber )); // clearing bits
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	791b      	ldrb	r3, [r3, #4]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2103      	movs	r1, #3
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	4619      	mov	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	400a      	ands	r2, r1
 8000d1a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6899      	ldr	r1, [r3, #8]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

	//3. Configure the PuPd settings

	temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber) );
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	79db      	ldrb	r3, [r3, #7]
 8000d34:	461a      	mov	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	791b      	ldrb	r3, [r3, #4]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber ) );
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	791b      	ldrb	r3, [r3, #4]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2103      	movs	r1, #3
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	4619      	mov	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	400a      	ands	r2, r1
 8000d5e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68d9      	ldr	r1, [r3, #12]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

	//4. Configure the OutType

	temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber) );
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7a1b      	ldrb	r3, [r3, #8]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	791b      	ldrb	r3, [r3, #4]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	2301      	movs	r3, #1
 8000d92:	408b      	lsls	r3, r1
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4619      	mov	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6859      	ldr	r1, [r3, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

	//5. Configure the AltFunction
	if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUN)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	795b      	ldrb	r3, [r3, #5]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d136      	bne.n	8000e2a <GPIO_Init+0x33e>
	{
		// to configure alternate function
		uint32_t temp1 = 0 ;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
		uint32_t temp2 = 0 ;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]

		temp1 = ((pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber ) / 8 ); // for AF0 or AF1
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	791b      	ldrb	r3, [r3, #4]
 8000dc8:	08db      	lsrs	r3, r3, #3
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	60fb      	str	r3, [r7, #12]
		temp2 = ((pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber ) % 8 ); // for selecting bits of AF
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	791b      	ldrb	r3, [r3, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60bb      	str	r3, [r7, #8]

		pGPIOHandle ->pGPIOx->AFR[temp1] &= ~(0xF  << (4*temp2) );
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	3208      	adds	r2, #8
 8000de0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	210f      	movs	r1, #15
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	4619      	mov	r1, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4011      	ands	r1, r2
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	3208      	adds	r2, #8
 8000dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle ->pGPIOx->AFR[temp1] |= (pGPIOHandle ->GPIO_PinConfig.GPIO_PinAlFunMode  << (4*temp2) );
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	7a5b      	ldrb	r3, [r3, #9]
 8000e10:	4619      	mov	r1, r3
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4311      	orrs	r1, r2
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	3208      	adds	r2, #8
 8000e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


	}

}
 8000e2a:	bf00      	nop
 8000e2c:	371c      	adds	r7, #28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40013800 	.word	0x40013800
 8000e40:	40013c00 	.word	0x40013c00

08000e44 <GPIO_ReadFromInputPin>:
 * @Note		- None
 *
 *****************************************************************/

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t )((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]

	return value;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]

}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <__libc_init_array>:
 8000e70:	b570      	push	{r4, r5, r6, lr}
 8000e72:	4e0d      	ldr	r6, [pc, #52]	; (8000ea8 <__libc_init_array+0x38>)
 8000e74:	4c0d      	ldr	r4, [pc, #52]	; (8000eac <__libc_init_array+0x3c>)
 8000e76:	1ba4      	subs	r4, r4, r6
 8000e78:	10a4      	asrs	r4, r4, #2
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	d109      	bne.n	8000e94 <__libc_init_array+0x24>
 8000e80:	4e0b      	ldr	r6, [pc, #44]	; (8000eb0 <__libc_init_array+0x40>)
 8000e82:	4c0c      	ldr	r4, [pc, #48]	; (8000eb4 <__libc_init_array+0x44>)
 8000e84:	f000 f818 	bl	8000eb8 <_init>
 8000e88:	1ba4      	subs	r4, r4, r6
 8000e8a:	10a4      	asrs	r4, r4, #2
 8000e8c:	2500      	movs	r5, #0
 8000e8e:	42a5      	cmp	r5, r4
 8000e90:	d105      	bne.n	8000e9e <__libc_init_array+0x2e>
 8000e92:	bd70      	pop	{r4, r5, r6, pc}
 8000e94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e98:	4798      	blx	r3
 8000e9a:	3501      	adds	r5, #1
 8000e9c:	e7ee      	b.n	8000e7c <__libc_init_array+0xc>
 8000e9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ea2:	4798      	blx	r3
 8000ea4:	3501      	adds	r5, #1
 8000ea6:	e7f2      	b.n	8000e8e <__libc_init_array+0x1e>
 8000ea8:	08000ed0 	.word	0x08000ed0
 8000eac:	08000ed0 	.word	0x08000ed0
 8000eb0:	08000ed0 	.word	0x08000ed0
 8000eb4:	08000ed4 	.word	0x08000ed4

08000eb8 <_init>:
 8000eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eba:	bf00      	nop
 8000ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ebe:	bc08      	pop	{r3}
 8000ec0:	469e      	mov	lr, r3
 8000ec2:	4770      	bx	lr

08000ec4 <_fini>:
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	bf00      	nop
 8000ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eca:	bc08      	pop	{r3}
 8000ecc:	469e      	mov	lr, r3
 8000ece:	4770      	bx	lr
